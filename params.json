{
  "name": "Laravel Docker Containers",
  "tagline": "Automate your docker containers inside Laravel",
  "body": "# Laravel Docker Containers\r\n\r\nAutomate your docker containers inside Laravel\r\n\r\n## Setup\r\n\r\n#### Requirements\r\nDocker >= 1.13\r\n\r\nLaravel >= 5.3.*\r\n\r\nPHP >= 5.6.4\r\n\r\n#### Installation\r\n```sh\r\ncomposer require idrislab/laravel-docker-containers\r\n```\r\n\r\nRegister DockerContainers with Artisan in *app/Console/Kernel.php*\r\n\r\n```php\r\nprotected $commands = [\r\n    DockerContainers::class,\r\n  ];\r\n```\r\n\r\nSet the following environment variables (inside your .env file)\r\n\r\n```sh\r\nDOCKER_SOCKET=unix:///var/run/docker.sock\r\nDOCKER_CONTAINERS=mysql,redis\r\n```\r\n\r\n## Usage\r\n\r\n```\r\nphp artisan containers <start|stop|restart> [--name=]\r\n```\r\n\r\n### Examples\r\nStarting all containers\r\n```sh\r\nphp artisan containers start\r\n```\r\n\r\nStopping only one container\r\n```sh\r\nphp artisan containers stop --name=mysql\r\n```\r\n\r\n## Adding Containers\r\nCreate a new Artisan command\r\n```sh\r\nphp artisan make:command Containers\r\n```\r\n\r\nRegister the new command with Artisan in *app/Console/Kernel.php* and remove *DockerContainers::class* if registered\r\n```php\r\nprotected $commands = [\r\n       Commands\\Containers::class,\r\n  ];\r\n```\r\n\r\nUpdate your command to look like\r\n```php\r\n<?php\r\nnamespace App\\Console\\Commands;\r\n\r\nuse luisgros\\DockerContainers;\r\n\r\n/**\r\n * Class  Containers\r\n *\r\n * @package App\\Console\\Commands\r\n */\r\nclass Containers extends DockerContainers\r\n{\r\n    /**\r\n     * Execute the console command.\r\n     *\r\n     * @return mixed\r\n     */\r\n    public function handle()\r\n    {\r\n\r\n    }\r\n}\r\n```\r\n\r\nAdd your container(s) inside method *handle()*, in this case we're adding a [MySQL Group Replication Container](https://hub.docker.com/r/mysql/mysql-gr/)\r\n```php\r\n      $containers = [\r\n            'MySQLGr' => [\r\n                'repo'      => 'mysql/mysql-gr',\r\n                'tag'       => 'latest',\r\n                'instances' => 3,\r\n                'commands'   => [\r\n                    1 =>\r\n                        '-d --net=group1 -e MYSQL_ROOT_PASSWORD=ENV[DB_PASSWORD] \\\\'.\r\n                        '-e MYSQL_REPLICATION_USER=ENV[DB_PASSWORD] -e MYSQL_REPLICATION_PASSWORD=ENV[DB_PASSWORD] \\\\'.\r\n                        'mysql/mysql-gr --group_replication_group_seeds=\\'ENV[MYSQLGR2]:6606,ENV[MYSQLGR3]:6606\\' \\\\'.\r\n                        '--server-id=ENV[INSTANCE_NAME]',\r\n                    2 =>\r\n                        '-d --net=group1 -e MYSQL_ROOT_PASSWORD=ENV[DB_PASSWORD] \\\\'.\r\n                        '-e MYSQL_REPLICATION_USER=ENV[DB_PASSWORD] -e MYSQL_REPLICATION_PASSWORD=ENV[DB_PASSWORD] \\\\'.\r\n                        'mysql/mysql-gr --group_replication_group_seeds=\\'ENV[MYSQLGR1]:6606,ENV[MYSQLGR3]:6606\\' \\\\'.\r\n                        '--server-id=ENV[INSTANCE_NAME]',\r\n                    3 =>\r\n                        '-d --net=group1 -e MYSQL_ROOT_PASSWORD=ENV[DB_PASSWORD] \\\\'.\r\n                        '-e MYSQL_REPLICATION_USER=ENV[DB_PASSWORD] -e MYSQL_REPLICATION_PASSWORD=ENV[DB_PASSWORD] \\\\'.\r\n                        'mysql/mysql-gr --group_replication_group_seeds=\\'ENV[MYSQLGR1]:6606,ENV[MYSQLGR2]:6606\\' \\\\'.\r\n                        '--server-id=ENV[INSTANCE_NAME]',\r\n                ],\r\n                'network' => 'group1',\r\n                'docker' => [\r\n                    'pre' => [\r\n                        'network create group1 &>/dev/null',\r\n                    ]\r\n                ]\r\n            ],\r\n        ];\r\n\r\n        $this->addContainers($containers);\r\n        \r\n        parent::handle();\r\n```\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}